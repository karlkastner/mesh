% Sat Mar 15 12:34:40 WIB 2014
% Karl Kastner, Berlin
%
%% import mesh from {filename}.msh files as generated by GSMH
%
function obj = import_msh(obj, filename)
	%fid = fopen([folder filesep filename],'r');
	map = true;
	% for faster processing, the entire file is loaded
	if (map)
	   line_C = textread(filename, '%s', 'delimiter', '\n');
	   ldx=1;
	else
		fid = fopen(filename,'r');
		if (-1 == fid)
			%error(['cannot open file ', folder, filesep, filename]);
			error(['cannot open file ', filename]);
		end
	end

	P = [];
	E = [];
	T = [];
	
	Nodes       = '$Nodes';
	Elements    = '$Elements';
	EndElements = '$EndElements';

	% initialise state machine
	state = 0;
	pdx   = 0;
	% element counter
	edx   = 0;
	% triangle counter
	tdx   = 0;
	% edge counter
	ddx   = 0;

	% state machine, yeah!
	while (state ~= 7)
		if (map)
			if (ldx > length(line_C))
				warning('file ended before data was complete');
				break;
			end
			line = line_C{ldx};
			ldx = ldx+1;
		else
			line = fgetl(fid);
			if (-1 == line)
				error('file ended before data was complete');
			end
		end
		switch (state)
		case {0}
			% search for node field
			if (strcmp(line,Nodes))
				state = 1;
			end
		case {1}
			% read number of points
			np = str2num(line);
			% allocate memory
			P = zeros(np,3);
			if (np > 0)
				state = 2;
			else
				state = 3;
			end
		case {2}
			% read points
			pdx = pdx+1;
			A = sscanf(line,'%d %f %f %f');
			if (pdx == A(1))
				P(pdx,1) = A(2);
				P(pdx,2) = A(3);
				P(pdx,3) = A(4);
				if (pdx == np)
					state = 3;
				end
			else
				error('id does not match current point');
			end
			% TODO verify by read EndNodes
		case {3}
			% search for Elements field
			if (strcmp(line,Elements))
				state = 4;
			end
		case {4}
			% read number of elements
			ne = str2num(line);
			% allocate memory
			T = zeros(ne,3);
			if (ne > 0)
				state = 5;
			else
				state = 6;
			end
		case {5}
			edx = edx+1;
			A = sscanf(line,'%d %f %f %f %f %f %f %f %f %f');
			% TODO verify validity of indices
			% test id
			if (isempty(A) || edx ~= A(1))
				warning('id does not match current element');
			end

			% gmsh does not distinguish between edges, surfaces and volumes,
			% all are elements
			switch (length(A))
			case {7}
				ddx = ddx+1;
				% read edge
				E(ddx,1:2) = A(6:7);
			case {8}
				% read triangle
				tdx = tdx+1;
				T(tdx,1:3) = A(6:8);
				%N(tdx) = 3;
			case {9}
				% read rectangle
				tdx=tdx+1;
				T(tdx,1:4) = A(6:9);
				%N(tdx) = 4;
			end % switch
			if (edx == ne)
				state = 6;
			end
			% TODO verify by read EndElements
		case {6}
			if (strcmp(line,EndElements))
				state = 7;
			else
				warning('Elements not terminated by EndElements, skipping line');
			end
		otherwise
			error('invalid state in state machine');
	end % switch
	end % while
	if (~map)
		fclose(fid);
	end

	% truncate elements and edges to true size
	T = T(1:tdx,:);
	E = E(1:ddx,:);

	% export edges
	if (ddx > 1)
	else
		warning('no edges found');
	end

	% export elements
	if (tdx > 0)
	else
		warning('mesh contains no triangular elements');
	end

	% write variables
	obj.point = P;
	obj.elem  = T;
	obj.edge  = E;
end % read_msh()

